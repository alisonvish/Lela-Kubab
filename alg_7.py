# Алгоритм 7

# 1. Напишите алгоритм пирамидальной сортировки (heap sort)
# Рассмотрите, как алгоритм работает в отладчике (debug)
# список для сортировки 
lst = [3, 14, 1, 7, 9, 8, 11, 6, 4, 2]


# Дополнительно
# 2. Создайте функцию min/max, которая использует алгоритм сортировки написанный выше 




# Решение


def xoteam (lst, n, i):
    largest = i  # Инициализируем наибольший элемент как корень
    left = 2 * i + 1     # левый = 2*i + 1
    right = 2 * i + 2     # правый = 2*i + 2

    # Проверяем существует ли левый дочерний элемент больший, чем корень
    if left < n and lst[i] < lst[left]:
        largest = left

    # Проверяем существует ли правый дочерний элемент больший, чем корень
    if right < n and lst[largest] < lst[right]:
        largest = right

    # Меняем корень, если нужно
    if largest != i:
        lst[i], lst[largest] = lst[largest], lst[i]  # свап

        # Применяем xoteam к корню.
        xoteam(lst, n, largest)

# Основная функция для сортировки массива заданного размера
def xoxo(lst):
    n = len(lst)

    # Построение max-heap.
    for i in range(n, -1, -1):
        xoteam(lst, n, i)

    # Один за другим извлекаем элементы
    for i in range(n - 1, 0, -1):
        lst[i], lst[0] = lst[0], lst[i]   # свап
        xoteam(lst, i, 0)
    
    return lst

lst = [3, 14, 1, 7, 9, 8, 11, 6, 4, 2]
print(xoxo(lst))

#ответ
# [1, 2, 3, 4, 6, 7, 8, 9, 11, 14]
